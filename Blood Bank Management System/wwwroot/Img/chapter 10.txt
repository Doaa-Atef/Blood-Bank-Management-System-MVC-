
// 10.6
public BinNode BTinc(BinNode root)
{
    if (root == null) {
        return null;
    }

    int currentValue = root.value();
    root.setValue(currentValue + 1);  // Increment the value of the current node

    BinNode left = BTinc(root.left());   // Recursively increment the left subtree
    BinNode right = BTinc(root.right()); // Recursively increment the right subtree

    // Update the left and right subtrees of the root node
    root.left = left;
    root.right = right;

    return root;
}

// 10.7
public BinNode BTsetdepth(BinNode root, int depth)
{
    if (root == null) {
        return null;
    }

    root.setValue(depth);  // Set the value of the current node to the depth

    BinNode left = BTsetdepth(root.left(), depth + 1);   // Recursively set the depth for the left subtree
    BinNode right = BTsetdepth(root.right(), depth + 1); // Recursively set the depth for the right subtree

    // Update the left and right subtrees of the root node
    root.left = left;
    root.right = right;

    return root;
}

// 10.7
public boolean BTchecksum(BinNode root) {
    if (root == null || root.isLeaf()) {
        return true;  // Empty tree or leaf node satisfies the property
    }

    int nodeValue = root.value();
    int leftSum = (root.left() != null) ? root.left().value() : 0;
    int rightSum = (root.right() != null) ? root.right().value() : 0;

    if (nodeValue != leftSum + rightSum) {
        return false;  // Property is violated
    }

    boolean leftResult = BTchecksum(root.left());
    boolean rightResult = BTchecksum(root.right());

    return leftResult && rightResult;
}

// 10.7
public int BTleaf(BinNode root) {
    if (root == null) {
        return 0;  // Empty tree has no leaf nodes
    }

    if (root.isLeaf()) {
        return 1;  // Current node is a leaf node
    }

    int leftLeaves = BTleaf(root.left());
    int rightLeaves = BTleaf(root.right());

    return leftLeaves + rightLeaves;
}

// 10.7
public int BTsumall(BinNode root) {
    if (root == null) {
        return 0;  // Empty tree has a sum of 0
    }

    int sum = root.value();  // Add the value of the current node

    int leftSum = BTsumall(root.left());    // Recursively calculate the sum of left subtree
    int rightSum = BTsumall(root.right());  // Recursively calculate the sum of right subtree

    return sum + leftSum + rightSum;  // Return the sum of current node, left subtree, and right subtree
}

// 10.7
public boolean BTcheckval(BinNode root, int value) {
    if (root == null) {
        return false;  // Reached a null node, value not found
    }

    if (root.value() == value) {
        return true;  // Found a node with the given value
    }

    // Recursively check the left and right subtrees
    boolean foundLeft = BTcheckval(root.left(), value);
    boolean foundRight = BTcheckval(root.right(), value);

    return foundLeft || foundRight;  // Return true if found in either subtree
}

// 10.7
public int BTheight(BinNode root) {
    if (root == null) {
        return 0;  // Empty tree has height 0
    }

    // Recursively find the heights of the left and right subtrees
    int leftHeight = BTheight(root.left());
    int rightHeight = BTheight(root.right());

    // Return the maximum height of the left and right subtrees, plus 1 for the root
    return Math.max(leftHeight, rightHeight) + 1;
}

// 10.7
public int BTgetdiff(BinNode root) {
    if (root == null) {
        return 0;
    }

    int oddSum = calculateSum(root, 1);
    int evenSum = calculateSum(root, 2);
    
    boolean c = true;
    if (c == true)
    {
        BTgetdiff(null);
        c = false;
    }
    
    return oddSum - evenSum;
}

private int calculateSum(BinNode node, int level) {
    if (node == null) {
        return 0;
    }
    
    int value = (level % 2 == 1) ? node.value() : 0;
    int leftSum = calculateSum(node.left(), level + 1);
    int rightSum = calculateSum(node.right(), level + 1);

    return value + leftSum + rightSum;
}

// 10.7
public boolean BTpathsum(BinNode root, int sum) {
    if (root == null) {
        return sum == 0;
    }

    if (root.value() == sum) {
        return true;
    }

    return BTpathsum(root.left(), sum - root.value()) || BTpathsum(root.right(), sum - root.value());
}